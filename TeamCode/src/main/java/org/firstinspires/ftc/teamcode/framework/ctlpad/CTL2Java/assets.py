# Some data for CTL2Java
# File last updated 8-23-25

# Update this first item to match your TeamCode layout
# You may need to add things to support additional Method libraries.
# See their READMEs for what they need.
# Don't update anything else in here unless you're quite familiar with CTL2Java!
# Expander tags:
# <~tc> -> "org.firstinspires.ftc.teamcode"
# importLocations = {"primitives": "<~tc>.framework.ctlpad.primitives",
#                    "DTS": "<~tc>.framework.units.DTS", }

# This directly affects what Library categories CTL2Java tries to load and where
# it tries to load them from.
libDirs = {"BaseActions": "actions/base",
           "ExtensionActions": "actions/extension",
           "Methods": "methods",
           "Setters": "setters"}

# The following expander tags are available to the start template:
# <~tc> - location of TeamCode package
# <~package> - destination package of the output file
# <~className> - name of the output file
# <~season> - the selected season
# <~seasonInterface> - the Scheme interface used for the selected season
# <~seasonInterfaceClass> - the name of the Interface, without the complete package path
# <~seasonState> - the State class used for the selected season
# <~seasonStateClass> - the name of the Class, without the complete package path
# (Actually, no, I never implemented this) anything specified in importLocations above (e.g. <~primitives>)

indyStartTemplateLines = ["package <~package>;",
                          "",
                          "import com.qualcomm.robotcore.hardware.Gamepad;",
                          "import <~tc>.framework.units.DTS;",
                          "import <~tc>.framework.ctlpad.primitives.Axis;",
                          "import <~tc>.framework.ctlpad.primitives.Button;",
                          "import <~tc>.framework.ctlpad.primitives.axes.ButtonAsAxis;",
                          "import <~tc>.framework.ctlpad.primitives.axes.ExponentialAxis;",
                          "import <~tc>.framework.ctlpad.primitives.axes.LinearAxis;",
                          "import <~tc>.framework.ctlpad.primitives.axes.MergedAxis;",
                          "import <~tc>.framework.ctlpad.primitives.buttons.AxisAsButton;",
                          "import <~tc>.framework.ctlpad.primitives.buttons.MomentaryButton;",
                          "import <~tc>.framework.ctlpad.primitives.buttons.ToggleButton;",
                          "import <~tc>.framework.ctlpad.primitives.buttons.TriggerButton;",
                          "",
                          "<~getImportLines>",
                          "import <~seasonInterface>;",
                          "import <~seasonState>;",
                          "",
                          "/** This control scheme was generated by CTL2Java. */",
                          "public class <~className> implements <~seasonInterfaceClass> {",
                          "\t\n",
                          "\tprivate Gamepad gamepad1;",
                          "\tprivate Gamepad gamepad2;",
                          "\t<~seasonStateClass> state;"
                          "\t",
                          "<~getClassLines>",
                          "\t",
                          "\tpublic <~className>(Gamepad gamepad1, Gamepad gamepad2) {",
                          "\t\tthis.gamepad1 = gamepad1;",
                          "\t\tthis.gamepad2 = gamepad2;",
                          "\t\tstate = new <~seasonStateClass>();",
                          "\t\t",
                          ]

fieldyStartTemplateLines = ["package <package>;",
                            "",
                            "import com.qualcomm.robotcore.hardware.Gamepad;",
                            "import <~tc>.framework.units.DTS;",
                            "import <~tc>.framework.ctlpad.primitives.*;",
                            "import <~tc>.<~season>.subsystems.*;",
                            "import <~tc>.framewwork.subsystems.*;",
                            "import <~tc>.framework.processors.*;",
                            "",
                            "\tprivate Gamepad gamepad1;",
                            "\tprivate Gamepad gamepad2;",
                            "\t<~seasonState> state;",
                            "",
                            "/** This control scheme was generated using CTL2Java. */",
                            "public class <~className> implements <~seasonInterface> {",
                            "\t\n",
                            "\tpublic <~className>(Gamepad gamepad1, Gamepad gamepad2, FriendlyIMU imu) {",
                            "\t\tthis.gamepad1 = gamepad1;",
                            "\t\tthis.gamepad2 = gamepad2;",
                            "\t\tthis.imu = imu;",
                            "\t\tstate = new <~seasonState>();",
                            ]

# Additional tags are available to the end template:
# <~getStateInteriorLines> - created by the code generator as it goes

indyEndTemplateLines = ["\n\t",
                        "\t@Override",
                        "\tpublic <~seasonState> getState() {",
                        "<~getStateInteriorLines>\n\t\t",
                        "\t\treturn state;",
                        "\t}",
                        "}"]

fieldyEndTemplateLines = ["\n\t",
                          "\t@Override",
                          "\tpublic <~seasonState> getState() {",
                          "<~getStateInteriorLines>\n\t\t",
                          "\t\treturn state;",
                          "\t}",
                          "}"]

validButtons = ["A",
                "B",
                "X",
                "Y",
                "Start",
                "Select",
                "R1",
                "L1",
                "DPadUp",
                "DPadDown",
                "DPadLeft",
                "DPadRight",
                "LSC",
                "RSC",
                "PS", ]

# Somewhat confusing naming, sorry. Not which buttons can be used as modifiers - all buttons can - this is
# for actions mapped to modifiers. An action can be mapped to the "Default" modifier as well as when any
# modifier button is active.
validModifiers = validButtons + ["Default"]

validAxes = ["LSX",
             "LSY",
             "RSX",
             "RSY",
             "R2",
             "L2", ]

validCTLFields = ["Version",
                  "Gamepad",
                  "Season",
                  "Bases",
                  "Extensions",
                  "Interface",
                  "State",
                  "Imports",
                  "Positions",
                  "Modifiers",
                  "Buttons",
                  "Axes",
                  "Methods",
                  "Actions",
                  "Setters", ]

gamepadRequiredFields = ["Version",
                         "Gamepad",
                         "Season",
                         "Buttons",
                         "Axes"]

methodLibRequiredFields = ["Version",
                           "Season",
                           "Bases",
                           "Extensions",
                           "Methods"]

actionLibRequiredFields = ["Version",
                           "Season",
                           "Actions"]

settersRequiredFields = ["Version",
                         "Season",
                         "Interface",
                         "State",
                         "Imports",
                         "Setters"]

usableCTLFields = ["Version",
                   "Gamepad",
                   "Season",
                   "Bases",
                   "Extensions",
                   "Interface",
                   "State",
                   "Imports",
                   "Modifiers",
                   "Buttons",
                   "Axes",
                   "Actions",
                   "Methods",
                   "Setters"]

ctlFieldTypes = {"Version": int,
                 "Gamepad": int,
                 "Season": str,
                 "Bases": list,
                 "Extensions": list,
                 "Interface": str,
                 "State": str,
                 "Imports": list,
                 "Positions": dict,
                 "Modifiers": list,
                 "Buttons": dict,
                 "Axes": dict,
                 "Methods": dict,
                 "Actions": dict,
                 "Setters": list}

validModifierKeys = ["Type", "Action"]

buttonMappingTypes = {"Type": str,
                      "Action": dict}

validButtonTypes = ["Momentary",
                    "Toggle",
                    "Trigger",
                    "Axis"]

axisMappingTypes = {"Type": str,
                    "Scaling": float,
                    "Action": dict}

validAxisTypes = ["Linear",
                  "Exponential",
                  "Merged",
                  "Button"]

actionTypes = {"Name": str,
               "Parameters": dict}

parametersTypes = {"Type": str,
                   "Range": str,
                   "Value": int}

validDataTypes = ["byte",
                  "short",
                  "int",
                  "long",
                  "float",
                  "double",
                  "boolean",
                  "char",
                  "String"]

libActionRequiredFields = ["Type",
                           "Code"]

validLibActionTypes = ["Button",
                       "Axis"]

# Required fields of a Parameter for an Action in an Action Library
libActionParamFields = ["Type",
                        "Value"]

validDriveTypes = ["indy",
                   "fieldy"]

requiredFieldsByLibType = {"BaseActions": actionLibRequiredFields,
                           "ExtensionActions": actionLibRequiredFields,
                           "Methods": methodLibRequiredFields,
                           "Setters": settersRequiredFields}

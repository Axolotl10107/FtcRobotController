package org.firstinspires.ftc.teamcode.framework.ctlpad.CTL2Java;

import com.qualcomm.robotcore.hardware.Gamepad;
import org.firstinspires.ftc.teamcode.framework.units.DTS;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.Axis;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.Button;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.axes.ButtonAsAxis;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.axes.ExponentialAxis;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.axes.LinearAxis;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.axes.MergedAxis;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.buttons.AxisAsButton;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.buttons.MomentaryButton;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.buttons.ToggleButton;
import org.firstinspires.ftc.teamcode.framework.ctlpad.primitives.buttons.TriggerButton;

import org.firstinspires.ftc.teamcode.framework.subsystems.claw.Claw;

import org.firstinspires.ftc.teamcode.fy23.controls.ctlpad.TeleOpScheme23;
import org.firstinspires.ftc.teamcode.fy23.controls.ctlpad.TeleOpState23;

/** This control scheme was generated by CTL2Java. */
public class TestScheme implements TeleOpScheme23 {
	

	private Gamepad gamepad1;
	private Gamepad gamepad2;
	TeleOpState23 state;	

	private Button OneR1Default;
	private Button OneL1Default;
	private Button OneSelectDefault;
	private Button OneStartDefault;
	private Axis OneLSXDefault;
	private Axis OneRSXDefault;
	private Axis OneR2Default;
	private Axis OneL2Default;
	private Axis OneMergedR2L2Default;
	private Button TwoXDefault;
	private Button TwoADefault;
	private Button TwoDPadUpDefault;
	private Button TwoDPadDownDefault;
	private Button TwoDPadRightDefault;
	private Button TwoDPadLeftDefault;
	private Axis TwoLSYDefault;
	private Axis TwoR2Default;
	private Axis TwoL2Default;
	private Axis TwoMergedR2L2Default;
	private Axis TwoPivotSlowUpDefault;
	private Axis TwoPivotSlowDownDefault;
	private Axis TwoPivotMediumUpDefault;
	private Axis TwoPivotMediumDownDefault;
	private Axis TwoMergedPivotSlowUpPivotSlowDownDefault;
	private Axis TwoMergedPivotMediumUpPivotMediumDownDefault;

	
	public TestScheme(Gamepad gamepad1, Gamepad gamepad2) {
		this.gamepad1 = gamepad1;
		this.gamepad2 = gamepad2;
		state = new TeleOpState23();
		
		OneR1Default = new MomentaryButton( () -> gamepad1.right_bumper );
		OneL1Default = new TriggerButton( () -> gamepad1.left_bumper );
		OneSelectDefault = new TriggerButton( () -> gamepad1.back );
		OneStartDefault = new TriggerButton( () -> gamepad1.start );
		OneLSXDefault = new ExponentialAxis( () -> gamepad1.left_stick_x, 2.0 );
		OneRSXDefault = new LinearAxis( () -> gamepad1.right_stick_x, 1.0 );
		OneR2Default = new LinearAxis( () -> gamepad1.right_trigger, 1.0 );
		OneL2Default = new LinearAxis( () -> gamepad1.left_trigger, 1.0 );
		TwoXDefault = new TriggerButton( () -> gamepad2.x );
		TwoADefault = new TriggerButton( () -> gamepad2.a );
		TwoDPadUpDefault = new MomentaryButton( () -> gamepad2.dpad_up );
		TwoDPadDownDefault = new MomentaryButton( () -> gamepad2.dpad_down );
		TwoDPadRightDefault = new MomentaryButton( () -> gamepad2.dpad_right );
		TwoDPadLeftDefault = new MomentaryButton( () -> gamepad2.dpad_left );
		TwoLSYDefault = new LinearAxis( () -> gamepad2.left_stick_y, 1.0 );
		TwoR2Default = new LinearAxis( () -> gamepad2.right_trigger, 1.0 );
		TwoL2Default = new LinearAxis( () -> gamepad2.left_trigger, 1.0 );
		TwoPivotSlowUpDefault = new ButtonAsAxis( new MomentaryButton( () -> gamepad2.dpad_up ), 0.15 );
		TwoPivotSlowDownDefault = new ButtonAsAxis( new MomentaryButton( () -> gamepad2.dpad_down ), 0.15 );
		TwoPivotMediumUpDefault = new ButtonAsAxis( new MomentaryButton( () -> gamepad2.dpad_right ), 0.2 );
		TwoPivotMediumDownDefault = new ButtonAsAxis( new MomentaryButton( () -> gamepad2.dpad_left ), 0.2 );
		OneMergedR2L2Default = new MergedAxis( OneL2Default, OneR2Default );
		TwoMergedR2L2Default = new MergedAxis( TwoL2Default, TwoR2Default );
		TwoMergedPivotSlowUpPivotSlowDownDefault = new MergedAxis( TwoPivotSlowDownDefault, TwoPivotSlowUpDefault );
		TwoMergedPivotMediumUpPivotMediumDownDefault = new MergedAxis( TwoPivotMediumDownDefault, TwoPivotMediumUpDefault );
}

	void setDts() {
		double drive = 0;
		boolean driveSet = false;
		double driveVal = OneMergedR2L2Default.value();
	if ( !driveSet && !( -0.01 < driveVal && driveVal < 0.01 ) ) {
		drive = OneMergedR2L2Default.value();
		driveSet = true;
	}
	

		
		double turn = 0;
		boolean turnSet = false;
		double turnVal = OneLSXDefault.value();
	if ( !turnSet && ! ( -0.01 < turnVal && turnVal < 0.01 ) ) {
		turn = OneLSXDefault.value();
		turnSet = true;
	}
	

		
		double strafe = 0;
		boolean strafeSet = false;
		double strafeVal = OneRSXDefault.value();
	if ( !strafeSet && !( -0.01 < strafeVal && strafeVal < 0.01 ) ) {
		strafe = OneRSXDefault.value();
		strafeSet = true;
	}
	

		
		state.setDts( new DTS( drive, turn, strafe ) );
	}

	void setArmMovement() {
		boolean pivotSet = false;
		if ( !pivotSet && Math.abs( TwoLSYDefault.value() ) > 0.05 ) {
		state.setArmMovement( TwoLSYDefault.value() );
		pivotSet = true;
	}
	
	if ( !pivotSet && Math.abs( TwoMergedPivotSlowUpPivotSlowDownDefault.value() ) > 0.05 ) {
		state.setArmMovement( TwoMergedPivotSlowUpPivotSlowDownDefault.value() );
		pivotSet = true;
	}
	
	if ( !pivotSet && Math.abs( TwoMergedPivotMediumUpPivotMediumDownDefault.value() ) > 0.05 ) {
		state.setArmMovement( TwoMergedPivotMediumUpPivotMediumDownDefault.value() );
		pivotSet = true;
	}
	

		if ( !pivotSet ) {
			state.setArmMovement( 0.0 );
		}
	}

	void setElevatorMovement() {
		boolean extendSet = false;
		if ( !extendSet && Math.abs( TwoMergedR2L2Default.value() ) > 0.05 ) {
		state.setElevatorMovement( TwoMergedR2L2Default.value() );
		extendSet = true;
	}
	

		if ( !extendSet ) {
			state.setElevatorMovement( 0.0 );
		}
	}

	void setClawState() {
	boolean clawSet = false;
		if ( !clawSet && TwoXDefault.isActive() ) {
		state.setClawState( Claw.State.OPEN );
	}
	

		if ( !clawSet && TwoADefault.isActive() ) {
		state.setClawState( Claw.State.CLOSED );
	}
	

	}

	void setLaunchPlane() {
		state.setLaunchPlane( OneR1Default.isActive() );
	

	}

	void setMaxDriveSpeed() {
		if ( OneSelectDefault.isActive() ) {
		state.setMaxDriveSpeed( state.getMaxDriveSpeed() + -0.1 );
	}
	
	if ( OneStartDefault.isActive() ) {
		state.setMaxDriveSpeed( state.getMaxDriveSpeed() + 0.1 );
	}
	

	}

	void setSquareUp() {
		state.setSquareUp( OneL1Default.isActive() );
	

	}


	
	@Override
	public org.firstinspires.ftc.teamcode.fy23.controls.ctlpad.TeleOpState23 getState() {
		setDts();
		setArmMovement();
		setElevatorMovement();
		setClawState();
		setLaunchPlane();
		setMaxDriveSpeed();
		setSquareUp();

		
		return state;
	}
}

